/*
 * Copyright Charles Gray
 * All rights reserved
 * Contact author for EULA
 */
package v;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.table.DefaultTableModel;
import v.Log.Logfile;
import java.lang.ArrayIndexOutOfBoundsException;
import java.sql.SQLException;
import java.sql.ResultSet;
import m.db.ResultSetTableModel;
import m.db.Database;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JWindow;
import javax.swing.SwingUtilities;
import java.awt.FocusTraversalPolicy;
import java.util.Vector;
import java.awt.Component;
import java.awt.Container;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import m.Common;
import m.CallmaidRecord;
import c.CallmaidUtils;
import c.Time.TimeUtils;



/**
 * Provides a JFrame with ScrollPane and JTable that is populated manually via addRow method. 
 * TableModel is set via constructor or method  setTableModel(Object[] columns).
 * Title of JFrame is set via constructor or method setFrameTitle(String titlel).
 * Usage: Construct this class, add rows via addRow(), and then call adjustColumns() to resize column widths.
 * Read table contents via method getValueAt(row, column);
 * If you want to invoke "Charlie's" column resize method remember to call adjustColumns() after all rows have been added.
 * Then call resize().  I haven't been able to figure out how to resize from within the same JFrame class.
 * Dependencies: v.Log.Logfile
 * @author chas
 */
public class TableEditCallmaid extends javax.swing.JFrame
{
private final Logfile logger;
private DefaultTableModel dtml;
private int columnNumber;  // number of columns in definition of DefaultTableModel.  Used to check number of columns in addRow()
private Dimension screen;
private TableColumnAdjuster tca;
public Dimension dimFrame;
public boolean debug = true;
private final Database dbLocal;
private String queryStr;
private ResultSetTableModel rstml;
private int rowSelected;
private MyOwnFocusTraversalPolicy newPolicy; // Needed in order to traverse down first column, then down second.
private final DateTimeFormatter format1 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
// ad hoc
private int pidSelected;
private int organizationSelected;
private int classificationSelected;
private boolean updateFlag=false; // this is set to true by selecting an existing row in the table.
private java.sql.Date creationDate;
private java.sql.Date qsoDate;
private TimeUtils tu;
private CallmaidUtils cutils;



public TableEditCallmaid(Logfile logger, Database db)
  {
  this(logger,"Ham Licensee Edit",db,"select * from CALLMAID order by callsign");
  }

public TableEditCallmaid(Logfile logger, String title, Database dbl, String query)
  {
  if( logger == null) 
    {
    String className = this.getClass().getName();
    this.logger = new Logfile(className, className + ".log");
    }
  else this.logger = logger;
  initComponents();
  if(title != null) this.setFrameTitle(title);
  this.dbLocal = dbl;
  if(!this.populateCountries()) return;
  if(!this.populateStatesComboBox()) return;
  this.tu = new TimeUtils(logger);
  this.cutils = new CallmaidUtils(logger, Common.prodb, Common.debugFlag);
  this.queryStr=query;
  this.screen = Toolkit.getDefaultToolkit().getScreenSize();
  this.queryRefresh(query);
  this.setTraversalPolicy();
  this.setVisible(true);
  } // end Table constructor
  


 
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        labelStatus = new javax.swing.JLabel();
        jButtonRefreshQuery = new javax.swing.JButton();
        jButtonDeleteRow = new javax.swing.JButton();
        jLabelLastName = new javax.swing.JLabel();
        jLabelFirstName = new javax.swing.JLabel();
        jLabelMiddleName = new javax.swing.JLabel();
        jTextFieldMiddleInitial = new javax.swing.JTextField();
        jTextFieldLastName = new javax.swing.JTextField();
        jTextFieldFirstName = new javax.swing.JTextField();
        jLabelCallsign = new javax.swing.JLabel();
        jTextFieldCallsign = new javax.swing.JTextField();
        jLabelState = new javax.swing.JLabel();
        jLabelMaidenhead = new javax.swing.JLabel();
        jTextFieldMaidenhead = new javax.swing.JTextField();
        jLabelCountry = new javax.swing.JLabel();
        jLabelZipcode = new javax.swing.JLabel();
        jTextFieldZipcode = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jComboBoxCountry = new javax.swing.JComboBox<>();
        jComboBoxState = new javax.swing.JComboBox<>();
        jLabelStreet = new javax.swing.JLabel();
        jTextFieldStreet = new javax.swing.JTextField();
        jLabelCity = new javax.swing.JLabel();
        jTextFieldCity = new javax.swing.JTextField();
        jLabelITUZone = new javax.swing.JLabel();
        jTextFieldITUZone = new javax.swing.JTextField();
        jLabelCQZone = new javax.swing.JLabel();
        jTextFieldCQZone = new javax.swing.JTextField();
        jCheckBoxWorked = new javax.swing.JCheckBox();
        jLabelCreationDate = new javax.swing.JLabel();
        jTextFieldCreationDate = new javax.swing.JTextField();
        jLabelQSODate = new javax.swing.JLabel();
        jTextFieldQSODate = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemColumnLayout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Table Display");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        labelStatus.setText("Status");

        jButtonRefreshQuery.setText("Refresh Query");
        jButtonRefreshQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshQueryActionPerformed(evt);
            }
        });

        jButtonDeleteRow.setText("Delete Row");
        jButtonDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRowActionPerformed(evt);
            }
        });

        jLabelLastName.setText("Last Name");

        jLabelFirstName.setText("First Name");

        jLabelMiddleName.setText("Middle Initial");

        jLabelCallsign.setText("Callsign");

        jLabelState.setText("State");

        jLabelMaidenhead.setText("Maidenhead");

        jLabelCountry.setText("Country");

        jLabelZipcode.setText("Zipcode");

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jComboBoxCountry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCountryActionPerformed(evt);
            }
        });

        jComboBoxState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabelStreet.setText("Street");

        jLabelCity.setText("City");

        jLabelITUZone.setText("ITU Zone");

        jLabelCQZone.setText("CQ Zone");

        jCheckBoxWorked.setText("Worked");

        jLabelCreationDate.setText("Creation Date");

        jLabelQSODate.setText("QSO Date");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemColumnLayout.setText("Change Column Layout");
        jMenuItemColumnLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemColumnLayoutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemColumnLayout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelStatus)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabelITUZone, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jTextFieldITUZone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelCQZone, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCQZone, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxWorked, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCreationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCreationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelQSODate, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldQSODate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldLastName))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabelMaidenhead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabelMiddleName, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                            .addComponent(jLabelCallsign, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldCallsign, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldMiddleInitial, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldMaidenhead, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabelCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelZipcode, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                                    .addComponent(jLabelCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                                    .addComponent(jTextFieldCity, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                                    .addComponent(jComboBoxState, 0, 270, Short.MAX_VALUE)
                                    .addComponent(jTextFieldZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxCountry, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRefreshQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jButtonDeleteRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(298, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLastName)
                    .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStreet)
                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCity)
                    .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRefreshQuery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMiddleName)
                    .addComponent(jTextFieldMiddleInitial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelState)
                    .addComponent(jComboBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteRow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelZipcode)
                    .addComponent(jTextFieldZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCallsign)
                    .addComponent(jTextFieldCallsign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMaidenhead)
                            .addComponent(jTextFieldMaidenhead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCountry)
                        .addComponent(jComboBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelITUZone)
                    .addComponent(jTextFieldITUZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCQZone)
                    .addComponent(jTextFieldCQZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxWorked)
                    .addComponent(jLabelCreationDate)
                    .addComponent(jTextFieldCreationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelQSODate)
                    .addComponent(jTextFieldQSODate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelStatus))
        );

        labelStatus.getAccessibleContext().setAccessibleName("statusLabel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

 private void jMenuItemColumnLayoutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemColumnLayoutActionPerformed
 {//GEN-HEADEREND:event_jMenuItemColumnLayoutActionPerformed
 String modes[] = { "Resize All Columns", "Resize Last Column", "Resize Next Column",
        "Resize Off", "Resize Subsequent Columns", "Charlie Adjust" };
    
 final int modeKey[] = { JTable.AUTO_RESIZE_ALL_COLUMNS, JTable.AUTO_RESIZE_LAST_COLUMN,
        JTable.AUTO_RESIZE_NEXT_COLUMN, JTable.AUTO_RESIZE_OFF,
        JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS, 0 };
 JWindow jf = new JWindow(this);   
 JComboBox resizeModeComboBox = new JComboBox(modes);
 jf.add(resizeModeComboBox);
 Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
 jf.setLocation(((screen.width - this.getSize().width) /2),((screen.height - this.getSize().height) / 2));
 jf.pack();
 jf.setVisible(true);
 resizeModeComboBox.setVisible(true);
    ItemListener itemListener = new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        JComboBox source = (JComboBox) e.getSource();
        /* modeKey[index] 
        0=AUTO_RESIZE_ALL_COLUMNS, 
        1=AUTO_RESIZE_LAST_COLUMN,
        2=AUTO_RESIZE_NEXT_COLUMN, 
        3=AUTO_RESIZE_OFF,
        4=AUTO_RESIZE_SUBSEQUENT_COLUMNS, 
        5=Charlie's method 
        */
        int index = source.getSelectedIndex();
        if(index==5)
          {
          logger.println("User selected Charlie column widths.");
          adjustColumns();
          }
        else jTable1.setAutoResizeMode(modeKey[index]);
      }
    };
    resizeModeComboBox.addItemListener(itemListener);
    
 }//GEN-LAST:event_jMenuItemColumnLayoutActionPerformed

 private void jButtonRefreshQueryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRefreshQueryActionPerformed
 {//GEN-HEADEREND:event_jButtonRefreshQueryActionPerformed
 this.queryRefresh(this.queryStr);
 }//GEN-LAST:event_jButtonRefreshQueryActionPerformed

 private void jButtonDeleteRowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDeleteRowActionPerformed
 {//GEN-HEADEREND:event_jButtonDeleteRowActionPerformed
 //logger.i("TableEdit buttonDeleteRow pressed, click count=" + evt.getClickCount() + ", button=" + evt.getButton() + ", row=" + this.rowSelected);
 //In the case of name table unique column is pid, column 8.
 deleteRow((String)this.jTable1.getValueAt(rowSelected, 0));
 System.out.println("Delete " + this.jTable1.getValueAt(rowSelected,0));
 this.jTable1.repaint();
 }//GEN-LAST:event_jButtonDeleteRowActionPerformed

 private void jTable1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTable1MouseClicked
 {//GEN-HEADEREND:event_jTable1MouseClicked
 this.updateFlag=true;
 this.rowSelected = this.jTable1.rowAtPoint(evt.getPoint());
 System.out.println("rowselected=" + rowSelected);
 this.jTextFieldCallsign.setText((String)this.jTable1.getModel().getValueAt(rowSelected,0)); 
 this.jTextFieldMaidenhead.setText((String)this.jTable1.getModel().getValueAt(rowSelected,1));
 this.jTextFieldFirstName.setText((String)this.jTable1.getModel().getValueAt(rowSelected,2));
 this.jTextFieldMiddleInitial.setText((String)this.jTable1.getModel().getValueAt(rowSelected,3));
 this.jTextFieldLastName.setText((String)this.jTable1.getModel().getValueAt(rowSelected,4));
 this.jTextFieldStreet.setText((String)this.jTable1.getModel().getValueAt(rowSelected,5));
 this.jTextFieldCity.setText((String)this.jTable1.getModel().getValueAt(rowSelected,6));
 String statecode = (String)this.jTable1.getModel().getValueAt(rowSelected,7);
 String statename;
 if(statecode.equalsIgnoreCase("NULL")) statecode="";
 if(!statecode.equals(""))
   {
   try
     {
     ResultSetTableModel rstml = this.dbLocal.selectT("Select NAME from STATES where CODE='" + statecode + "'");
     rstml.rsl.first();
     statename = rstml.rsl.getString(1);
     }
   catch(SQLException se){logger.ee("Failed Select NAME from STATES where CODE='" + statecode + "'", se); return;}
   System.out.println("state name=" + statename);
   this.jComboBoxState.setSelectedItem(statename);
   }
 int zipcode;
 Object zipcodeObject = this.jTable1.getModel().getValueAt(rowSelected,8);
 if(zipcodeObject==null)zipcode=0; else zipcode=(Integer)zipcodeObject;
 this.jTextFieldZipcode.setText(String.valueOf(zipcode));
 String countryname=(String)this.jTable1.getModel().getValueAt(rowSelected,10);
 this.jComboBoxCountry.setSelectedItem(countryname);
 int ITU;
 Object ITUObject = this.jTable1.getModel().getValueAt(rowSelected, 11);
 if(ITUObject==null) ITU=0; else ITU=(Integer)ITUObject;
 this.jTextFieldITUZone.setText(String.valueOf(ITU));
int CQ;
Object CQObject = this.jTable1.getModel().getValueAt(rowSelected, 12);
 if(CQObject==null) CQ=0; else CQ=(Integer)CQObject;
 this.jTextFieldCQZone.setText(String.valueOf(CQ));
boolean worked=false;
Object workedObject = this.jTable1.getValueAt(rowSelected,13);
if(workedObject==null) worked=false;
else
  {
  if(Common.DBType.equalsIgnoreCase("Derby_res"))worked=(Boolean)workedObject;
  else if(Common.DBType.equalsIgnoreCase("MariaDB"))
    {
    byte workedInt=(byte)workedObject;
    if(workedInt==0)worked=false; else worked=true;
    }
  }
 this.jCheckBoxWorked.setSelected(worked);
Object crDate = this.jTable1.getValueAt(rowSelected,14);
if(crDate==null) this.creationDate = new java.sql.Date(System.currentTimeMillis()); else this.creationDate=(java.sql.Date) crDate;
this.jTextFieldCreationDate.setText(this.tu.dateToString(creationDate));
Object qsoDateObj = this.jTable1.getValueAt(rowSelected,15);
if(crDate!=null) this.qsoDate=(java.sql.Date) qsoDateObj;
this.jTextFieldQSODate.setText(this.tu.dateToString(qsoDate));
 }//GEN-LAST:event_jTable1MouseClicked

 private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
 {//GEN-HEADEREND:event_jButtonSaveActionPerformed
 // Add new or edit existing record.
 // If CallsignIsUnique() then create record.
 // If this.updateFlag is true and !CallsignIsUnique() update record.
 // If this.updateFlag is false and !CallsignIsUnique() then render error and return.
 if(this.jTextFieldLastName.getText().equals(""))
   {
   logger.e("Last name is required.");
   }
 if(this.jTextFieldFirstName.getText().equals(""))
   {
   logger.e("First name is required.");
   }
 if(this.jTextFieldCallsign.getText().equals(""))
   {
   logger.e("Callsign is required.");
   }
 String callsign = jTextFieldCallsign.getText();
 String maidenhead = jTextFieldMaidenhead.getText();
 String firstname = this.jTextFieldFirstName.getText();
 String middleinitial = this.jTextFieldMiddleInitial.getText();
 String lastname = this.jTextFieldLastName.getText();
 String street = this.jTextFieldStreet.getText();
 String city = this.jTextFieldCity.getText();
 String statename = this.jComboBoxState.getSelectedItem().toString();
 String statecode="";
 if (statename.equals("NULL")) statename = "";
 if(debug)System.out.println("State name=" + statename);
 if(!statename.equals(""))
   {
   rstml = Common.prodb.queryGeneric("select CODE from STATES where NAME='" + statename + "'");
   try{rstml.rsl.first();} catch(SQLException se){logger.ee("Couldn't go to first row.",se); return;}
   try{statecode=rstml.rsl.getString(1);} catch(SQLException se){logger.ee("Failed to get column 1 from select CODE from States where name=" + statename,se);}
   }
 if(this.debug)System.out.println("State code=" + statecode);
 int zipcode;
 String zipstr = this.jTextFieldZipcode.getText();
 if(zipstr.equals(""))zipcode=0;
 else zipcode=Integer.parseInt(zipstr);
 Object countryNameObj = this.jComboBoxCountry.getSelectedItem();
 String countryName="";
 if(countryNameObj != null)countryName = countryNameObj.toString();
 if (countryName.equals("NULL")) countryName = "";
 if(debug)System.out.println("Country name=" + countryName);
 if(countryName.equals("")){logger.e("Country must be specified."); return;}
 rstml = Common.prodb.queryGeneric("select ABBR from COUNTRYABBR where NAME='" + countryName + "'");
 try{rstml.rsl.first();} catch(SQLException se){logger.ee("Couldn't go to first row.",se); return;}
 String countrycode="";
 try{countrycode=rstml.rsl.getString(1);} catch(SQLException se){logger.ee("Failed to get column 1 from select ABBR from COUNTRYABBR where name=" + countryName,se);}
 if(this.debug)System.out.println("Country code=" + countrycode);
 int ITU = Integer.parseInt(this.jTextFieldITUZone.getText());
 int CQ = Integer.parseInt(this.jTextFieldCQZone.getText());
 boolean worked = this.jCheckBoxWorked.isSelected();
 //this.qsoDate = new java.sql.Date(tu.stringToDate(this.jTextFieldQSODate.getText()).getTime());
 String qsoDateString = this.jTextFieldQSODate.getText();
 if(!qsoDateString.equalsIgnoreCase("NULL DATE"))this.qsoDate = tu.stringToSQLDate(this.jTextFieldQSODate.getText());
 else this.qsoDate=null;
 System.out.println("Date=" + qsoDate);
 String dsString="";
 Object dsObj = this.jTable1.getValueAt(rowSelected,16);
 if(dsObj!=null) dsString=(String) dsObj;
 dsString=cutils.dsUpdate(dsString,'4',0);
 // Did maidenhead change?
 String oldMaid = (String)this.jTable1.getModel().getValueAt(rowSelected,1);
 String newMaid = this.jTextFieldMaidenhead.getText();
 if(!oldMaid.equalsIgnoreCase(newMaid)) dsString=cutils.dsUpdate(dsString, '4',1);
 CallmaidRecord cr = new CallmaidRecord(callsign,maidenhead,firstname,middleinitial,lastname,street,city,statecode,zipcode,countrycode,ITU,CQ,worked,this.creationDate, qsoDate, dsString);
 Common.prodb.insertUpdateCallmaidRecord(cr,"U");
 this.queryRefresh(this.queryStr);
 }//GEN-LAST:event_jButtonSaveActionPerformed

 private void jComboBoxCountryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxCountryActionPerformed
 {//GEN-HEADEREND:event_jComboBoxCountryActionPerformed
 // System.out.println("Selected item=" + this.jComboBoxOrganization.getSelectedItem() + ", index=" + jComboBoxOrganization.getSelectedIndex());
 this.organizationSelected=this.jComboBoxCountry.getSelectedIndex();
 }//GEN-LAST:event_jComboBoxCountryActionPerformed

 
private boolean CallsignisUnique(String callsign)
  {
  String sqlString="select callsign from CALLMAID where callsign='" + callsign + "'";
  if(!Common.prodb.recordIsUnique(sqlString))
    {
    //JOptionPane.showMessageDialog(null,"Callsign already exists. Please edit existing record.","ERROR", JOptionPane.ERROR_MESSAGE);  
    return false;
    }
  this.queryRefresh(this.queryStr);
  return true;
  }
 
 
private void setTraversalPolicy()
  {
  Vector<Component> traversalOrder = new Vector<Component>(11); // There are 10 GUI elements in this interface
  traversalOrder.add(this.jTextFieldLastName);
  traversalOrder.add(this.jTextFieldFirstName);
  traversalOrder.add(this.jTextFieldMiddleInitial);
  traversalOrder.add(this.jTextFieldCallsign);
  traversalOrder.add(this.jTextFieldMaidenhead);
  traversalOrder.add(this.jTextFieldStreet);
  traversalOrder.add(this.jTextFieldCity);
  traversalOrder.add(this.jComboBoxState);
  traversalOrder.add(this.jTextFieldZipcode);
  traversalOrder.add(this.jComboBoxCountry);
  traversalOrder.add(this.jButtonSave);
  traversalOrder.add(this.jButtonRefreshQuery);
  traversalOrder.add(this.jButtonDeleteRow);
  newPolicy = new MyOwnFocusTraversalPolicy(traversalOrder);
  this.setFocusTraversalPolicy(newPolicy);
  }
 
 
/**
 * In the case of name table unique column is callsign.
 * @param uniqueKey 
 */
void deleteRow(String uniqueKey)  
  {
  // Issue "are you sure" to operator.  Returns "0" for answer yes.
  int retVal=JOptionPane.showConfirmDialog(null,"Are you sure that we want to delete callsign= " + uniqueKey + " ?", "Please confirm deletion.", JOptionPane.YES_NO_OPTION);  
  if(retVal != 0) return;
  //try{this.rstml=this.dbLocal.selectT(qStr);}
  //catch(SQLException se){logger.ee("Failed query=" + qStr,se); return;}
  this.dbLocal.delete("CALLMAID", "CALLSIGN='" + uniqueKey + "'");
  this.rstml.commit();
  logger.i("Operator has deleted callsign=" + uniqueKey);
  this.queryRefresh(queryStr);
  }
  
  

/*
 * Set title of Frame
 * Called by constructor.
 */  
public void setFrameTitle(String titlel)
  {
  this.setTitle(titlel);
  }
  
  
 /*
  * Create TableModel to define columns.
  * Called by constructor
  */
public boolean setTableModel(Object[] columns)
  {
  // DefaultTableModel is an implementation of TableModel that uses a Vector of Vectors to store the cell value objects. 
  DefaultTableModel dtmll;
  // construct DefaultTableModel specifying column names, but no rows.  Rows are added iteratively in method deviceList.
  // constructor DefaultTableModel(Vector columnNames, int rowCount)
  // dtmll = new DefaultTableModel(new Object[] { "Bus", "Device","Vendor ID", "Vendor Name", "Product ID", "Product Name", "Product Detail", "Port", "Speed", "MaxPacketSize", "Device Class", "Parent Dev.", "Max Power", "Intf. Count", "Intf. Class", "ETransfer Type", "ESynch Type"},0);
  dtmll = new DefaultTableModel(columns,0);
  // return dtmll;
  this.columnNumber = columns.length;
  this.dtml=dtmll;
  this.jTable1.setModel(this.dtml);
  jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
  // Below is a template as to the manner in which rows are added in method deviceList.
  // dtmll.addRow(new Object[]{"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"});
  labelStatus.setText("Newly initialized model.  0 rows.");
  return true;
  } // end method setTableModel



/**
 * Called by this.addrows()
 * @param rowData
 * @return 
 */
public boolean addRow(Object[] rowData)
  {
  if(rowData.length != this.columnNumber){logger.e("Number of columns in addRow() call does not match number of columns defined in DefaultTableModel."); return false;}
  this.dtml.addRow(rowData);  // row data is added to the DefaultTableModel
  this.labelStatus.setText("Row count=" + String.valueOf(this.dtml.getRowCount()));
  //this.jTable1.revalidate();this.jTable1.resize(0,2000);this.jTable1.repaint();jTable1.paintImmediately(0,0,1000,1000);
  return true;
  }


/**
 * Called by constructor.
 * @param rowData
 * @return 
 */
public boolean addRows(Object[][] rowData)
  /* example
  * Object[][] rowData={ {"cell11", "cell12", "cell13"},{"cell21", "cell22", "cell23"},{"cell31", "cell32", "cell33"},{"cell41", "cell42", "cell43", }};
  */
  {
  if(rowData == null){logger.e("Null row data in Table.addRows()"); return false;}
  for(int x=0; x< rowData.length; x++) this.addRow(rowData[x]);
  this.labelStatus.setText("Row count=" + String.valueOf(this.dtml.getRowCount()));
  return true;
  }

/**
 * Populate table with contents of ResultSet
 * This will require that the ResultSet be replenished with a fresh database query if table is TYPE_FORWARD_ONLY
 * @param row
 * @param column
 * @return 
 */
public boolean addResultSetTableModel(ResultSetTableModel rstml)
  {
  int rowcount=rstml.getRowCount();
  int colcount=rstml.getColumnCount();
  Object rowArray[] = new Object[colcount];
  if(debug)logger.println("In addResultSetTableModel");
  if(debug)logger.println("rstml column count=" + colcount + ", column number=" + this.columnNumber);
  for(int rowi=0; rowi < rowcount; rowi++)
    {
    for(int coli=0; coli < colcount; coli++)rowArray[coli]=rstml.getValueAt(rowi, coli);
    if(!this.addRow(rowArray)) return false;
    }
  this.adjustColumns();
  return true;
  }


public boolean queryRefresh(String queryS)
  {
  try{this.rstml = this.dbLocal.selectT(queryS);}
  catch(SQLException se){logger.ee("Query=" + queryS + " failed in " + this.getClass(), se); return false;}
  this.setTableModel(rstml.getColumnNames());
  this.addResultSetTableModel(rstml);
  return true;
  }


    
public Object getValueAt(int row, int column)
  {
  try
    {
    return this.dtml.getValueAt(row, column);
    }
  catch(ArrayIndexOutOfBoundsException aiob){logger.ee("Failed to get TableModel " + this.getTitle() + " row=" + row + ", column=" + column, aiob); return null;}
  }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteRow;
    private javax.swing.JButton jButtonRefreshQuery;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxWorked;
    private javax.swing.JComboBox<String> jComboBoxCountry;
    private javax.swing.JComboBox<String> jComboBoxState;
    private javax.swing.JLabel jLabelCQZone;
    private javax.swing.JLabel jLabelCallsign;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelCountry;
    private javax.swing.JLabel jLabelCreationDate;
    private javax.swing.JLabel jLabelFirstName;
    private javax.swing.JLabel jLabelITUZone;
    private javax.swing.JLabel jLabelLastName;
    private javax.swing.JLabel jLabelMaidenhead;
    private javax.swing.JLabel jLabelMiddleName;
    private javax.swing.JLabel jLabelQSODate;
    private javax.swing.JLabel jLabelState;
    private javax.swing.JLabel jLabelStreet;
    private javax.swing.JLabel jLabelZipcode;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemColumnLayout;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldCQZone;
    private javax.swing.JTextField jTextFieldCallsign;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldCreationDate;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldITUZone;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldMaidenhead;
    private javax.swing.JTextField jTextFieldMiddleInitial;
    private javax.swing.JTextField jTextFieldQSODate;
    private javax.swing.JTextField jTextFieldStreet;
    private javax.swing.JTextField jTextFieldZipcode;
    private javax.swing.JLabel labelStatus;
    // End of variables declaration//GEN-END:variables

 
 
 
 
/**
 * Called by ItemLayout change
 */
public void adjustColumns()
  {
  jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  this.tca = new TableColumnAdjuster(this.jTable1);
  tca.adjustColumns(); 
  this.dimFrame = this.getSize();
  if(debug)System.out.println("columnWidthTotals=" + tca.columnWidthTotals + " screen width=" + this.screen.width);
  if(tca.columnWidthTotals > this.screen.width) tca.columnWidthTotals = this.screen.width;
  int columnWidth=tca.columnWidthTotals + (int)(jTable1.getColumnCount() * 2); 
  columnWidth += 10; // swag
  if(debug)System.out.println("Frame width set=" + columnWidth);
  this.dimFrame.width=columnWidth;  
  //if(this.dimFrame.width < (jScrollPane1.getSize().width)) this.dimFrame.width=jScrollPane1.getSize().width;
  this.dimFrame.height=(int)this.screen.height - (int)140;
  this.setSize(dimFrame);
  this.setLocation((dimFrame.width/2)-(columnWidth/2)+30,10);
  this.repaint(0,0,1000,1000);
  if(debug)System.out.println("Table # columns=" + jTable1.getColumnCount() + ", table width=" + jTable1.getSize().width + ", ScrollPane width=" + jScrollPane1.getSize().width  + ", Frame width=" + this.getSize().width + ", frame height=" + this.getSize().height);
  } // end adjustColumns
 

/**
 * Not being called at this time
 * @return 
 */
public int resize2()
  {
  Dimension dimFrame = this.getSize();
  Dimension dimFrame2;
  int widthTca=tca.columnWidthTotals;
  Dimension dimTable = this.jTable1.getSize();
  Dimension dimScrollPane = this.jScrollPane1.getSize();
  if(debug)System.out.println("columnWidthTotals=" + widthTca + " screen width=" + this.screen.width);
  widthTca=widthTca + 8;
  if(widthTca > this.screen.width) widthTca = this.screen.width;
  dimScrollPane.width=widthTca + 4;
  dimTable.width=widthTca;
  if(debug)System.out.println("Table width=" + jTable1.getSize().width + ", ScrollPane width=" 
     + jScrollPane1.getSize().width  + ", Frame width=" + this.getSize().width + " or " + this.getWidth());
  dimFrame2 = new Dimension(widthTca,(int)dimFrame.getHeight());
  this.setSize(dimFrame2);
  if(debug)System.out.println("Table width=" + jTable1.getSize().width + ", ScrollPane width=" 
     + jScrollPane1.getSize().width  + ", Frame width=" + this.getSize().width + " or " + this.getWidth());
  this.setLocation(((screen.width - this.getSize().width) /2),((screen.height - this.getSize().height) / 2));
  this.revalidate();
  this.repaint();
  //this.pack();  Don't do this.  It will cause a resize of the JFrame
  if(debug)System.out.println("Table width=" + jTable1.getSize().width + ", ScrollPane width=" 
     + jScrollPane1.getSize().width  + ", Frame width=" + this.getSize().width + " or " + this.getWidth());
  return widthTca;
  } // end resize2()
 
/*
private void setLocation()
  {
  this.setLocation(((screen.width - this.getSize().width) /2),((screen.height - this.getSize().height) / 2));
  }
*/





public static class MyOwnFocusTraversalPolicy extends FocusTraversalPolicy
    {
    Vector<Component> order;
 
   public MyOwnFocusTraversalPolicy(Vector<Component> order) 
      {
      this.order = new Vector<Component>(order.size());
      this.order.addAll(order);
      }
      
   public Component getComponentAfter(Container focusCycleRoot, Component aComponent)
      {
      int idx = (order.indexOf(aComponent) + 1) % order.size();
      return order.get(idx);
      }
 
    public Component getComponentBefore(Container focusCycleRoot, Component aComponent)
      {
      int idx = order.indexOf(aComponent) - 1;
      if (idx < 0) 
        {
        idx = order.size() - 1;
        }
      return order.get(idx);
      }
 
    public Component getDefaultComponent(Container focusCycleRoot) 
      {
      return order.get(0);
      }
 
    public Component getLastComponent(Container focusCycleRoot) 
      {
      return order.lastElement();
      }
 
    public Component getFirstComponent(Container focusCycleRoot) 
      {
      return order.get(0);
      }
    } // end class MyOwnFocusTraversalPolicy






// ad hoc
private boolean populateCountries()
  {
  // Populate combobox of country names
  this.jComboBoxCountry.removeAllItems();
  this.jComboBoxCountry.addItem("None");
  Common.prodb.alcountrynames.forEach((n) -> this.jComboBoxCountry.addItem((String)n));     
  return true;
  }


// ad hoc
private boolean populateStatesComboBox()
  {
  // Populate combobox of state names
  this.jComboBoxState.removeAllItems();
  this.jComboBoxState.addItem("NULL");
  Common.prodb.alstatenames.forEach((n) -> this.jComboBoxState.addItem((String)n));  
  return true;    
  }






} // end class Table
