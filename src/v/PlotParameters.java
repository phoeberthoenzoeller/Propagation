/*
 * Copyright Charles Gray.
 * All rights Reserved.
 */
package v;
import java.awt.Color;
import v.Log.Logfile;
import java.awt.Dimension;
import java.awt.Toolkit;
import m.Common;
import m.Propdbutils;
import m.db.ResultSetTableModel;
import java.sql.Timestamp;
import java.sql.SQLException;
import java.time.LocalDateTime;
import v.Charting.ContactsPolarChart;
import m.DoubleArrayGrowable;
import java.util.ArrayList;
import java.util.Iterator;
import v.MessageDisplay;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;




/**
 *
 * @author chas
 */
public class PlotParameters extends javax.swing.JFrame {
private final Logfile logger;
private final Propdbutils prodb;
private final boolean debugFlag;

    /**
     * Creates new form PlotParameters
     */
public PlotParameters(Logfile log) 
  {
  this.logger = log;
  this.prodb = Common.prodb;
  this.debugFlag = Common.debugFlag;
  initComponents();
  this.jComboBoxTimeFrom.removeAllItems();
  this.jComboBoxTimeTo.removeAllItems();
  for(int x=0; x < 25; x++) 
    {
    this.jComboBoxTimeFrom.addItem(String.valueOf(x)); 
    this.jComboBoxTimeTo.addItem(String.valueOf(x));
    }
  this.jComboBoxTimeTo.setSelectedItem("24");
  Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
  this.setLocation(((screen.width - this.getSize().width) /2),((screen.height - this.getSize().height) / 2));
  this.setVisible(true);
  } // end constructor()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelTimeRange = new javax.swing.JLabel();
        jComboBoxTimeFrom = new javax.swing.JComboBox<>();
        jLabelFromTime = new javax.swing.JLabel();
        jLabelToTime = new javax.swing.JLabel();
        jComboBoxTimeTo = new javax.swing.JComboBox<>();
        jLabelDateRange = new javax.swing.JLabel();
        jLabelFromDate = new javax.swing.JLabel();
        jLabelToDate = new javax.swing.JLabel();
        jTextFieldFromDate = new javax.swing.JTextField();
        jTextFieldToDate = new javax.swing.JTextField();
        jLabelLast = new javax.swing.JLabel();
        jTextFieldDays = new javax.swing.JTextField();
        jLabelDays = new javax.swing.JLabel();
        jLabelBand = new javax.swing.JLabel();
        jComboBoxBand = new javax.swing.JComboBox<>();
        jButtonPlot = new javax.swing.JButton();
        jLabelPlotLimit = new javax.swing.JLabel();
        jTextFieldPlotLimit = new javax.swing.JTextField();
        jCheckBoxFilterbyRSSI = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldRSSIMin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldRSSIMax = new javax.swing.JTextField();
        jLabelRecordsProcessed = new javax.swing.JLabel();
        jTextFieldRecordsProcessed = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plot Parameters");

        jLabelTimeRange.setText("Time Range");

        jComboBoxTimeFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));
        jComboBoxTimeFrom.setToolTipText("Hour of the day ");

        jLabelFromTime.setText("From");

        jLabelToTime.setText("To");

        jComboBoxTimeTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));
        jComboBoxTimeTo.setToolTipText("Hour of the day ");

        jLabelDateRange.setText("Date Range");

        jLabelFromDate.setText("From");

        jLabelToDate.setText("To");

        jLabelLast.setText("Last");
        jLabelLast.setIconTextGap(0);

        jLabelDays.setText("days");

        jLabelBand.setText("Band");

        jComboBoxBand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "80", "40", "20", "15", "10" }));

        jButtonPlot.setText("Plot");
        jButtonPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlotActionPerformed(evt);
            }
        });

        jLabelPlotLimit.setText("Limit in kilometers");

        jTextFieldPlotLimit.setText("20000");

        jCheckBoxFilterbyRSSI.setText("Filter by RSSI");

        jLabel1.setText(">=");

        jTextFieldRSSIMin.setText("-30");

        jLabel2.setText("<=");

        jTextFieldRSSIMax.setText("+30");

        jLabelRecordsProcessed.setText("Records Processed");

        jTextFieldRecordsProcessed.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelTimeRange, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(jLabelDateRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabelFromTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelToTime, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabelToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabelLast, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldDays, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelDays, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelBand, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxBand, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(jLabelPlotLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jTextFieldPlotLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonPlot, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelRecordsProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBoxFilterbyRSSI, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldRSSIMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldRSSIMax, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldRecordsProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelToTime))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTimeRange)
                            .addComponent(jComboBoxTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFromTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDateRange)
                            .addComponent(jLabelFromDate)
                            .addComponent(jTextFieldFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelToDate)
                            .addComponent(jTextFieldToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLast)
                            .addComponent(jTextFieldDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDays))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBand)
                    .addComponent(jComboBoxBand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPlotLimit)
                    .addComponent(jTextFieldPlotLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFilterbyRSSI, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldRSSIMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldRSSIMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPlot)
                    .addComponent(jLabelRecordsProcessed)
                    .addComponent(jTextFieldRecordsProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(150, 0, 0));
        jLabel3.setText("All Dates and Hours in GMT");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlotActionPerformed
     this.plotData();
    }//GEN-LAST:event_jButtonPlotActionPerformed

    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPlot;
    private javax.swing.JCheckBox jCheckBoxFilterbyRSSI;
    private javax.swing.JComboBox<String> jComboBoxBand;
    private javax.swing.JComboBox<String> jComboBoxTimeFrom;
    private javax.swing.JComboBox<String> jComboBoxTimeTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelBand;
    private javax.swing.JLabel jLabelDateRange;
    private javax.swing.JLabel jLabelDays;
    private javax.swing.JLabel jLabelFromDate;
    private javax.swing.JLabel jLabelFromTime;
    private javax.swing.JLabel jLabelLast;
    private javax.swing.JLabel jLabelPlotLimit;
    private javax.swing.JLabel jLabelRecordsProcessed;
    private javax.swing.JLabel jLabelTimeRange;
    private javax.swing.JLabel jLabelToDate;
    private javax.swing.JLabel jLabelToTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldDays;
    private javax.swing.JTextField jTextFieldFromDate;
    private javax.swing.JTextField jTextFieldPlotLimit;
    private javax.swing.JTextField jTextFieldRSSIMax;
    private javax.swing.JTextField jTextFieldRSSIMin;
    private javax.swing.JTextField jTextFieldRecordsProcessed;
    private javax.swing.JTextField jTextFieldToDate;
    // End of variables declaration//GEN-END:variables




private void plotData()
{
String startHour = this.jComboBoxTimeFrom.getSelectedItem().toString(); 
String endHour = this.jComboBoxTimeTo.getSelectedItem().toString();
int startHourInt = Integer.valueOf(startHour);
int endHourInt = Integer.valueOf(endHour); 
boolean rssiFilter = this.jCheckBoxFilterbyRSSI.isSelected();
int rssiMin = Integer.valueOf(this.jTextFieldRSSIMin.getText());
int rssiMax = Integer.valueOf(this.jTextFieldRSSIMax.getText());
int band = Integer.valueOf(this.jComboBoxBand.getSelectedItem().toString());
int plotLimit = Integer.valueOf(this.jTextFieldPlotLimit.getText());
ResultSetTableModel rstml = this.queryDatabase(band);
ArrayList<PlotEntity> resultArray = this.filterByHourRSSI(rstml, startHourInt, endHourInt, rssiFilter, rssiMin, rssiMax);
//radiofrequency is double. ldt is timestamp. rssi is smallint. initialbearing is double, distancebetween is double.
String title = "Signals received Zulu dates " + jTextFieldFromDate.getText()
        + "-" + jTextFieldToDate.getText() + ", hours " + startHour + "-" + endHour 
        + ", band=" + band;
this.createPlot(resultArray, title, plotLimit);
}  // end plotData()




private ResultSetTableModel queryDatabase(int band)
  {
  MessageDisplay sml;
  String startDate=null;
  String endDate=null;
  if(!this.jTextFieldDays.getText().equals(""))
    {
    long daysPast = Long.valueOf(this.jTextFieldDays.getText().trim());
    LocalDate currDate = LocalDate.now();
    LocalDate pastDate = currDate.minusDays(daysPast); 
    DateTimeFormatter dateTimeFormat1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    startDate = pastDate.format(dateTimeFormat1);
    endDate = currDate.format(dateTimeFormat1);
    }
  else
    {
    startDate = this.stringToSQLDateString(this.jTextFieldFromDate.getText());
    endDate = this.stringToSQLDateString(this.jTextFieldToDate.getText());
    }
  if(Common.DBType.equalsIgnoreCase("Derby_res"))
    {
    startDate = "CAST('" + startDate + " 00:00:00' as TIMESTAMP)";
    endDate = "CAST('" + endDate + " 23:59:59' as TIMESTAMP)";
    }
  else if(Common.DBType.equalsIgnoreCase("MariaDB"))
    {
    startDate = "'" + startDate + " 00:00:00'";
    endDate = "'" + endDate + " 23:59:59'";
    }
  float[] limits = this.bandlimits(band);
  String sqlClause = "Select ldt, rssi, initialbearing, distancebetween from ALLTXT where "
        + "LDT >= " + startDate + " and LDT <= " + endDate 
        + " and radiofrequency > " + limits[0] + " and radiofrequency < " + limits[1]
        ;
  ResultSetTableModel rstml = Common.prodb.queryGeneric(sqlClause);
  if(rstml != null)logger.println("rows returned from " + sqlClause + " = " + rstml.getRowCount());
  if(rstml.getRowCount()==Common.queryRowLimit)
    {
    sml = new MessageDisplay("Query results limited to " + Common.queryRowLimit + " rows.",400,400);
    sml.setModal(false);
    System.err.println("Query results limited to " + Common.queryRowLimit + " rows.");
    sml.showMessage(120);
    sml.dispose(); sml=null;
    }
  this.jTextFieldRecordsProcessed.setText(String.valueOf(rstml.getRowCount()));
  return rstml;
  } // end queryDatabase()



/**
 * Takes a MM/DD/YYYY string and returns a YYYY-MM-DD
 * @param dl
 * @return 
 */
private String stringToSQLDateString(String dl)
  {
  String[]  strDate = dl.split("/");
  int month=Integer.parseInt(strDate[0]);
  int day=Integer.parseInt(strDate[1]);
  int year=Integer.parseInt(strDate[2]);  if(year < 100) year += 2000;
  String sqlDateString = String.valueOf(year) + "-" + String.valueOf(month) + "-" + String.valueOf(day);
  logger.println("Entered date length=" + strDate.length + ", year=" + year + ", month=" + month + ", day=" + day + ", sqlDateString=" + sqlDateString);
  return sqlDateString;    
  }

private float[] bandlimits(int band)
  {
  float[] lim = new float[2];
  switch(band)
    {
    case 80:  lim[0]=3.5f; lim[1]=4.0f; break;
    case 40:  lim[0]=7.0f; lim[1]=7.3f; break;
    case 20:  lim[0]=14.0f; lim[1]=14.35f; break;
    case 15:  lim[0]=21.0f; lim[1]=21.45f; break;
    case 10:  lim[0]=28.0f; lim[1]=29.7f; break;
    default: logger.e("Invalied band supplied to bandlimits()=" + band); return null;
    } // end switch
  return lim;
  }


/**
 * ResultSetTableModel holds ldt, rssi, initialbearing, distancebetween 
 * Return rssi, initialbearing, distancebetween
 * @param rstml
 * @param startTime
 * @param endTime
 * @return 
 */
private ArrayList<PlotEntity> filterByHourRSSI(ResultSetTableModel rstml, int startHour, int endHour, boolean rssiFilter, int rssiMin, int rssiMax)
  {
  PlotEntity pentity;
  double[] retvald = new double[3];
  double[][] retvaldd = new double[rstml.getRowCount()][3];
  Timestamp ts=null;
  LocalDateTime ldtime;
  int rssiSample;
  int tHour;
  Double[] retvalD = new Double[3];
  Double[][] retvalDD;
  int retvalPtr=0;
  //DoubleArrayGrowable dag = new DoubleArrayGrowable(rstml.getRowCount(),logger);
  ArrayList<PlotEntity> retarraylist = new ArrayList<PlotEntity>();
  for(int x=0; x < rstml.getRowCount(); x++)
    {
    rstml.absolute(x);
    try
      {
      ts =rstml.rsl.getTimestamp(1);
      ldtime = ts.toLocalDateTime();
      rssiSample = rstml.rsl.getInt(2);
      tHour = ldtime.getHour();
      if(startHour < endHour) if(tHour < startHour || tHour >= endHour) continue;
      if(startHour > endHour) if(tHour > startHour || tHour <= endHour) continue;
      if(rssiFilter)
        {
        if(rssiSample < rssiMin || rssiSample > rssiMax) continue;
        }
      pentity = new PlotEntity((short)rssiSample, rstml.rsl.getDouble(3), rstml.rsl.getDouble(4));  //rssi, initialbearing, distancebeteen
      retarraylist.add(pentity);
      retvalPtr++;
      }
    catch(SQLException se){logger.ee("Failed to read LDT from ALLTXT",se);}
    } // end for each row in rstml
  logger.println("Results of query within hour range=" + retvalPtr);
  //Double[][] dlist = retarraylist.toArray(new Double[][]);
  retvalDD = new Double[retvalPtr][3];
  if(debugFlag)logger.println("ArrayList size=" + retarraylist.size());
  return retarraylist;
  }


/**
 * dataIn[0]=rssi, dataIn[1]=initialbearing, dataIn[2]=distancebetween
 * black(rssi <=-20), blue(rssi >20 - <=-10), green(rssi >-10 - <=0), yellow(rssi >0 - <=10), orange(rssi >10 - <=20), red(rssi >20)
 * @param dataIn 
 */
private void createPlot(ArrayList<PlotEntity> dataIn, String title, int plotLimit)
  {
  ContactsPolarChart aSpiral = new ContactsPolarChart("Received Signals Heat Map",title, plotLimit);
  aSpiral.pack(); aSpiral.setVisible(true);
  int thresh1 = -20;
  int thresh2 = -10;
  int thresh3 = 0;
  int thresh4 = 10;
  int thresh5 = 20;
  
  double[][] array1 = new double[dataIn.size()][2];  //black
  double[][] array2 = new double[dataIn.size()][2];  // blue
  double[][] array3 = new double[dataIn.size()][2];  // green
  double[][] array4 = new double[dataIn.size()][2];  // yellow
  double[][] array5 = new double[dataIn.size()][2];  // orange
  double[][] array6 = new double[dataIn.size()][2];  // read
  
  Color color1 = Color.BLACK;
  Color color2 = Color.BLUE;
  Color color3 = Color.GREEN;
  Color color4 = Color.YELLOW;
  Color color5 = Color.ORANGE;
  Color color6 = Color.RED;
  
  int dindex1=0,dindex2=0,dindex3=0,dindex4=0, dindex5=0, dindex6=0;
  for(PlotEntity de: dataIn)
    {
    if(de.distancebetween > plotLimit) continue;
    if(debugFlag)logger.println("forloop" + de.rssi + ":" + de.initialbearing + ":" + de.distancebetween);
    if(de.rssi < thresh1)
      {
      array1[dindex1][0]=de.initialbearing;
      array1[dindex1][1]=de.distancebetween;
      dindex1++;
      }
    else if(de.rssi >= thresh1 && de.rssi < thresh2)
      {
      array2[dindex2][0]=de.initialbearing;
      array2[dindex2][1]=de.distancebetween;
      dindex2++;
      }
    else if(de.rssi >= thresh2 && de.rssi < thresh3)
      {
      array3[dindex3][0]=de.initialbearing;
      array3[dindex3][1]=de.distancebetween;
      dindex3++;
      }
    else if(de.rssi >= thresh3 && de.rssi < thresh4)
      {
      array4[dindex4][0]=de.initialbearing;
      array4[dindex4][1]=de.distancebetween;
      dindex4++;
      }
    else if(de.rssi >= thresh4 && de.rssi < thresh5)
      {
      array5[dindex5][0]=de.initialbearing;
      array5[dindex5][1]=de.distancebetween;
      dindex5++;
      }
    else if(de.rssi >= thresh5)
      {
      array6[dindex6][0]=de.initialbearing;
      array6[dindex6][1]=de.distancebetween;
      dindex6++;
      }
    } // end for loop
  System.out.println("dindex1=" + dindex1);
  System.out.println("dindex2=" + dindex2);
  System.out.println("dindex3=" + dindex3);
  System.out.println("dindex4=" + dindex4);
  System.out.println("dindex5=" + dindex5);
  System.out.println("dindex6=" + dindex6);
  // If series are not added in order then you will get lines between nodes.
  aSpiral.addDataset(1, "<" + thresh1, color1, array1);  // black dots
  aSpiral.addDataset(2, thresh1 + "-" + thresh2, color2, array2); 
  aSpiral.addDataset(3, thresh2 + "-" + thresh3, color3, array3); 
  aSpiral.addDataset(4, thresh3 + "-" + thresh4, color4, array4);
  aSpiral.addDataset(5, thresh4 + "-" + thresh5, color5, array5);
  aSpiral.addDataset(6, ">" + thresh5, color6, array6);
  } // end createPlot()


public class PlotEntity
{
public short rssi;    
public double initialbearing;
public double distancebetween;
public PlotEntity(short r, double i, double d)
  {
  this.rssi = r;
  this.initialbearing = i;
  this.distancebetween = d;
  }
} // end classs PlotEntity



} // end class PlotParameters
