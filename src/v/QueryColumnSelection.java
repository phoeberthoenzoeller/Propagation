/*
 * Copyright Charles Gray.
 * All rights Reserved.
 */
package v;
import javax.swing.JOptionPane;
import m.Common;
import v.File.PropertiesUtils;



/**
 *
 * @author chas
 */
public class QueryColumnSelection extends javax.swing.JFrame {
private final PropertiesUtils puObj;
    /**
     * Creates new form QueryColumnSelection
     */
public QueryColumnSelection() 
{
initComponents();
this.setLocation(300, 50);
int[] columnSelectionsArray = Common.columnSelections;
for(int x=0; x < columnSelectionsArray.length; x++)
   { System.out.println("columnSelectionsArray[" + x + "]=" + columnSelectionsArray[x]);
   switch (columnSelectionsArray[x])
     {
     case 0: this.jCheckBoxDateTime.setSelected(true); break;
     case 1: this.jCheckBoxMessageType.setSelected(true); break;
     case 2: this.jCheckBoxRadioFrequency.setSelected(true); break;
     case 3: this.jCheckBoxRxTx.setSelected(true); break;
     case 4: this.jCheckBoxMode.setSelected(true); break;
     case 5: this.jCheckBoxRSSI.setSelected(true); break;
     case 6: this.jCheckBoxTimeOffset.setSelected(true); break;
     case 7: this.jCheckBoxAudioFrequency.setSelected(true); break;
     case 8: this.jCheckBoxMessage.setSelected(true); break;
     case 9: this.jCheckBoxCallerCallsign.setSelected(true); break;
     case 10: this.jCheckBoxCallerMaiden.setSelected(true); break;
     case 11: this.jCheckBoxRespondentCallsign.setSelected(true); break;
     case 12: this.jCheckBoxRespondentMaiden.setSelected(true); break;
     case 13: this.jCheckBoxCallerReportedRSS.setSelected(true); break;
     case 14: this.jCheckBoxSourceMaiden.setSelected(true); break;
     case 15: this.jCheckBoxSourceLat.setSelected(true); break;
     case 16: this.jCheckBoxSourceLon.setSelected(true); break;
     case 17: this.jCheckBoxDistanceBetween.setSelected(true); break;
     case 18: this.jCheckBoxInitialBearing.setSelected(true); break;
     case 19: this.jCheckBoxRespondentReportedRSS.setSelected(true); break;
     case 20: this.jCheckBoxContestIdentifier.setSelected(true); break;
     }
   } // end for each columnSelections[]
   this.puObj = new PropertiesUtils("properties.txt");
  if(puObj.getValidStatus()==false)
    {    
    JOptionPane.showMessageDialog(null, "Properties file=" + Common.logfileName + " not found.\n"
        + "Set Properties will create a new properties.txt properties file.", 
      "Fatal ERROR", JOptionPane.ERROR_MESSAGE);
    return;
    }
  this.setVisible(true);
}// end constructor
    
    
    
private void submit()
{
String selectTemp="";
if(this.jCheckBoxDateTime.isSelected()) selectTemp="0,"; 
if(this.jCheckBoxMessageType.isSelected()) selectTemp += "1,"; 
if(this.jCheckBoxRadioFrequency.isSelected()) selectTemp += "2,"; 
if(this.jCheckBoxRxTx.isSelected()) selectTemp += "3,"; 
if(this.jCheckBoxMode.isSelected()) selectTemp += "4,"; 
if(this.jCheckBoxRSSI.isSelected()) selectTemp += "5,"; 
if(this.jCheckBoxTimeOffset.isSelected()) selectTemp += "6,"; 
if(this.jCheckBoxAudioFrequency.isSelected()) selectTemp += "7,"; 
if(this.jCheckBoxMessage.isSelected()) selectTemp += "8,"; 
if(this.jCheckBoxCallerCallsign.isSelected()) selectTemp += "9,"; 
if(this.jCheckBoxCallerMaiden.isSelected()) selectTemp += "10,"; 
if(this.jCheckBoxRespondentCallsign.isSelected()) selectTemp += "11,"; 
if(this.jCheckBoxRespondentMaiden.isSelected()) selectTemp += "12,"; 
if(this.jCheckBoxCallerReportedRSS.isSelected()) selectTemp += "13,"; 
if(this.jCheckBoxSourceMaiden.isSelected()) selectTemp += "14,"; 
if(this.jCheckBoxSourceLat.isSelected()) selectTemp += "15,"; 
if(this.jCheckBoxSourceLon.isSelected()) selectTemp += "16,"; 
if(this.jCheckBoxDistanceBetween.isSelected()) selectTemp += "17,"; 
if(this.jCheckBoxInitialBearing.isSelected()) selectTemp += "18,"; 
if(this.jCheckBoxRespondentReportedRSS.isSelected()) selectTemp += "19,"; 
if(this.jCheckBoxContestIdentifier.isSelected()) selectTemp += "20";     
//System.out.println("selectTemp=" + selectTemp);
puObj.setParameterS("columnSelections", selectTemp);
//System.out.println(puObj.loadParameterS("callsign"));
puObj.save();
String[] csArray = selectTemp.split(",");
System.out.println("ColumnSelections=" + selectTemp);
Common.columnSelections = new int[csArray.length];
for(int x=0; x < csArray.length; x++)Common.columnSelections[x]=Integer.parseInt(csArray[x]);
} // end method submit()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxDateTime = new javax.swing.JCheckBox();
        jCheckBoxMessageType = new javax.swing.JCheckBox();
        jCheckBoxRadioFrequency = new javax.swing.JCheckBox();
        jCheckBoxRxTx = new javax.swing.JCheckBox();
        jCheckBoxMode = new javax.swing.JCheckBox();
        jCheckBoxRSSI = new javax.swing.JCheckBox();
        jCheckBoxTimeOffset = new javax.swing.JCheckBox();
        jCheckBoxAudioFrequency = new javax.swing.JCheckBox();
        jCheckBoxMessage = new javax.swing.JCheckBox();
        jCheckBoxCallerCallsign = new javax.swing.JCheckBox();
        jCheckBoxCallerMaiden = new javax.swing.JCheckBox();
        jCheckBoxRespondentCallsign = new javax.swing.JCheckBox();
        jCheckBoxRespondentMaiden = new javax.swing.JCheckBox();
        jCheckBoxCallerReportedRSS = new javax.swing.JCheckBox();
        jCheckBoxSourceMaiden = new javax.swing.JCheckBox();
        jCheckBoxSourceLat = new javax.swing.JCheckBox();
        jCheckBoxSourceLon = new javax.swing.JCheckBox();
        jCheckBoxDistanceBetween = new javax.swing.JCheckBox();
        jCheckBoxInitialBearing = new javax.swing.JCheckBox();
        jCheckBoxRespondentReportedRSS = new javax.swing.JCheckBox();
        jCheckBoxContestIdentifier = new javax.swing.JCheckBox();
        jButtonSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Query Columns");

        jCheckBoxDateTime.setText("Date and Time");

        jCheckBoxMessageType.setText("Message Type");

        jCheckBoxRadioFrequency.setText("Radio Frequency");

        jCheckBoxRxTx.setText("Receive/Transmit");

        jCheckBoxMode.setText("Digital Mode");

        jCheckBoxRSSI.setText("Received signal strength");

        jCheckBoxTimeOffset.setText("Time Offset ");

        jCheckBoxAudioFrequency.setText("Audio Frequency");

        jCheckBoxMessage.setText("Message");

        jCheckBoxCallerCallsign.setText("Caller Callsign");

        jCheckBoxCallerMaiden.setText("Caller Maidenhead");

        jCheckBoxRespondentCallsign.setText("Respondent Callsign");

        jCheckBoxRespondentMaiden.setText("Respondent Maidenhead");

        jCheckBoxCallerReportedRSS.setText("Caller Reported RSS");

        jCheckBoxSourceMaiden.setText("Source Maidenhead");

        jCheckBoxSourceLat.setText("Source Latitude");

        jCheckBoxSourceLon.setText("Source Longitude");

        jCheckBoxDistanceBetween.setText("Distance Between");

        jCheckBoxInitialBearing.setText("Initial Bearing");

        jCheckBoxRespondentReportedRSS.setText("Respondent Reported RSS");

        jCheckBoxContestIdentifier.setText("Contest Identifier");

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jCheckBoxDateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxMessageType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRadioFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRxTx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRSSI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxTimeOffset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxAudioFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxCallerCallsign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxCallerMaiden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRespondentCallsign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRespondentMaiden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxCallerReportedRSS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxSourceMaiden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxSourceLat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxSourceLon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxDistanceBetween, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxInitialBearing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxRespondentReportedRSS, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addComponent(jCheckBoxContestIdentifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxDateTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxMessageType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRadioFrequency)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRxTx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRSSI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxTimeOffset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxAudioFrequency)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxCallerCallsign)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxCallerMaiden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRespondentCallsign)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRespondentMaiden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxCallerReportedRSS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSourceMaiden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSourceLat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSourceLon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDistanceBetween)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxInitialBearing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRespondentReportedRSS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxContestIdentifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSubmit)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        this.submit();
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryColumnSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryColumnSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryColumnSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryColumnSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryColumnSelection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JCheckBox jCheckBoxAudioFrequency;
    private javax.swing.JCheckBox jCheckBoxCallerCallsign;
    private javax.swing.JCheckBox jCheckBoxCallerMaiden;
    private javax.swing.JCheckBox jCheckBoxCallerReportedRSS;
    private javax.swing.JCheckBox jCheckBoxContestIdentifier;
    private javax.swing.JCheckBox jCheckBoxDateTime;
    private javax.swing.JCheckBox jCheckBoxDistanceBetween;
    private javax.swing.JCheckBox jCheckBoxInitialBearing;
    private javax.swing.JCheckBox jCheckBoxMessage;
    private javax.swing.JCheckBox jCheckBoxMessageType;
    private javax.swing.JCheckBox jCheckBoxMode;
    private javax.swing.JCheckBox jCheckBoxRSSI;
    private javax.swing.JCheckBox jCheckBoxRadioFrequency;
    private javax.swing.JCheckBox jCheckBoxRespondentCallsign;
    private javax.swing.JCheckBox jCheckBoxRespondentMaiden;
    private javax.swing.JCheckBox jCheckBoxRespondentReportedRSS;
    private javax.swing.JCheckBox jCheckBoxRxTx;
    private javax.swing.JCheckBox jCheckBoxSourceLat;
    private javax.swing.JCheckBox jCheckBoxSourceLon;
    private javax.swing.JCheckBox jCheckBoxSourceMaiden;
    private javax.swing.JCheckBox jCheckBoxTimeOffset;
    // End of variables declaration//GEN-END:variables
}
